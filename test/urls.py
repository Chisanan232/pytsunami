from smoothcrawler import URL
import datetime
import pytest
import re


TEST_TARGET_URL = "https://www.google.com"
TEST_TARGET_URL_WITH_INDEX = "https://www.test.com?index={index}"
TEST_TARGET_URL_WITH_DATE = "https://www.google.com?date={date}"
TEST_TARGET_URL_WITH_DATETIME = "https://www.google.com?datetime={datetime}"
TEST_TARGET_URL_WITH_ITERATOR = "https://www.google.com?option={iterator}"
TEST_TARGET_URL_WITH_INVALID_OPTION = "https://www.google.com?test={test}"

START_INDEX = 1
END_INDEX = 10

START_DATE = "20211001"
END_DATE = "20211020"

TEST_ITERATOR_LIST = [range(1, 10)]
TEST_ITERATOR_DICT = {"index_1", 1, "index_2", 2, "index_3", 3}


class TestURLs:

    def test_generate(self):
        url = URL(TEST_TARGET_URL)
        assert url.base_url == TEST_TARGET_URL, "The URL value and target url is not the same."


    def test_generate_with_rule(self):
        index_urls = URL(TEST_TARGET_URL_WITH_INDEX, START_INDEX, END_INDEX)
        # Check for the amounts of setting and the return value of URL.
        assert len(index_urls) == len(range(START_INDEX, END_INDEX)), "The amounts of index range and URL should be the same."
        # Check the format of URLs which be return from URL object.
        index_options = [f"index={i}" for i in range(START_INDEX, END_INDEX)]
        for _url in index_urls:
            parameters = str(_url).split("?")
            argument = parameters[-1]
            search_result = re.search(r"index=[0-9]", argument)
            assert search_result.group(0) in index_options, "The URL value should only be generated by the passing option."

        date_urls = URL(TEST_TARGET_URL_WITH_DATE, "20211001", "20211020")
        assert len(date_urls), ""

        datetime_urls = URL(TEST_TARGET_URL_WITH_DATETIME, "20211001", "20211020")
        assert len(datetime_urls), ""

        iterator_urls = URL(TEST_TARGET_URL_WITH_ITERATOR, TEST_ITERATOR_LIST)
        assert len(iterator_urls) == len(TEST_ITERATOR_LIST), ""

        iterator_urls = URL(TEST_TARGET_URL_WITH_ITERATOR, TEST_ITERATOR_DICT)
        assert len(iterator_urls) == len(TEST_ITERATOR_DICT), ""

